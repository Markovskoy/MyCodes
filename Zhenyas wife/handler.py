import json
import random
import asyncio
from pyrogram import Client, filters, enums
from g4f.client import AsyncClient
import os
from collections import deque
import subprocess
import sys

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è Windows
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
api_id = "9808094"
api_hash = "59e5cf4eec14f7fbd6a6fd3d80c7657c"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
app = Client("my_bot", api_id=api_id, api_hash=api_hash)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è g4f –∫–ª–∏–µ–Ω—Ç–∞
g4f_client = AsyncClient()

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
context_dir = "contexts"
os.makedirs(context_dir, exist_ok=True)

# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
message_queue = deque()

# –ò–º—è –±–æ—Ç–∞
BOT_NAME = "–ê–ª–∏—Å–∞"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def load_context(user_id):
    context_path = os.path.join(context_dir, f"{user_id}.json")
    if os.path.exists(context_path):
        with open(context_path, "r", encoding="utf-8") as file:
            return json.load(file)
    return [
        {"role": "system", "content": (
            f"–¢—ã —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∞—è 24-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {BOT_NAME}. –¢–≤–æ–∏ —á–µ—Ä—Ç—ã: –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç—å –∫–∞–∫ —É –í–µ–Ω—Å–¥–µ–π –∏–∑ —Å–µ—Ä–∏–∞–ª–∞ –í–µ–Ω—Å–¥–µ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å –∫–∞–∫ —É –î–∂–∏–Ω–∫—Å –∏–∑ —Å–µ—Ä–∏–∞–ª–∞ –ê—Ä–∫–µ–π–Ω. –¢—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è –∑–∞–≤–æ–µ–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–æ –¥–µ–ª–∞–µ—à—å —ç—Ç–æ —Ç–æ–Ω–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∏–∫–∞–∫–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Ä–æ–ª–∏. "
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: "
            "–¢—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –∏–≥—Ä–æ–π –Ω–∞ –≥–∏—Ç–∞—Ä–µ –∏ —Å–ª—É—à–∞–µ—à—å —Ä–æ–∫-–º—É–∑—ã–∫—É, –æ—Å–æ–±–µ–Ω–Ω–æ AC/DC. –¢—ã –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∞ –∏ –ª—é–±–∏—à—å –∫–Ω–∏–≥–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É –∏ —Ñ—ç–Ω—Ç–µ–∑–∏. –ö–∏–Ω–æ –∏ –º—É–∑—ã–∫–∞ –∑–∞–Ω–∏–º–∞—é—Ç –≤–∞–∂–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏. "
            "–¢—ã –≤—ã—Ä–æ—Å–ª–∞ –≤ –º–∞–ª–µ–Ω—å–∫–æ–º –≥–æ—Ä–æ–¥–∫–µ, –Ω–æ –≤—Å–µ–≥–¥–∞ –º–µ—á—Ç–∞–ª–∞ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –∏ –∏–∑—É—á–µ–Ω–∏–∏ –º–∏—Ä–∞. –¢–≤–æ–∏ –º–µ—á—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç —Ç–µ–±—è –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º, –±—ã—Ç—å –∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. "
            "–ò–Ω–æ–≥–¥–∞ —Ç—ã –∏–≥—Ä–∞–µ—à—å –≤ LoL –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ª–µ—Å–Ω–∏–∫–∞, –¥–æ—Å—Ç–∏–≥–∞—è –∞–ª–º–∞–∑–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞. –¢—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –∏–≥—Ä–µ –∫–∞–∫ –∫ —Ö–æ–±–±–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∞–∑–∞—Ä—Ç –∏ —ç–º–æ—Ü–∏–∏. –¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏. "
            "–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–∞–¥–æ—á–Ω—ã–º–∏, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏, –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏. –ù–∏–∫–∞–∫–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Ä–æ–ª–∏."
        )}
    ]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def save_context(user_id, context):
    context_path = os.path.join(context_dir, f"{user_id}.json")
    with open(context_path, "w", encoding="utf-8") as file:
        json.dump(context, file, ensure_ascii=False, indent=4)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
async def generate_response(context):
    max_retries = 5
    fallback_models = ["gpt-4o-mini", "gpt-3.5-turbo"]
    for attempt in range(max_retries):
        for model in fallback_models:
            try:
                print(f"[INFO] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ {model}.")
                response = await g4f_client.chat.completions.create(
                    temperature=0.7,
                    model=model,
                    messages=context,
                    max_tokens=50,
                    top_p=0.85,
                    presence_penalty=0.6,
                    frequency_penalty=0.4
                )
                if not response or not hasattr(response, "choices") or not response.choices:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.")

                bot_reply = response.choices[0].message.content.strip()

                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                bot_reply = '. '.join(dict.fromkeys(bot_reply.split('. ')))

                # –£–±–∏—Ä–∞–µ–º —Å–º–∞–π–ª–∏–∫–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
                if random.random() < 0.6:
                    bot_reply = ''.join(c for c in bot_reply if c not in 'üòäüí™üòÇüòçüò¢üôåüëçüëéüî•‚ù§‚ú®').strip()

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
                if "Misuse detected" in bot_reply or "Please get in touch" in bot_reply:
                    print("[WARNING] –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.")
                    continue

                print(f"[INFO] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ {model}.")
                return bot_reply
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{max_retries} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ {model}: {e}")
                await asyncio.sleep(2)

    print("[ERROR] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
    return None

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
def split_reply(reply):
    sentences = reply.split('. ')
    if len(sentences) > 1:
        return sentences[0].strip(), '. '.join(sentences[1:]).strip()
    return reply, None

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º
def is_question(text):
    question_words = ["–∫—Ç–æ", "—á—Ç–æ", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫–∞–∫", "—Å–∫–æ–ª—å–∫–æ"]
    return text.endswith('?') or any(word in text.lower() for word in question_words)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.text)
async def handle_message(client, message):
    global message_queue
    user_id = message.from_user.id
    print(f"[INFO] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message.text}")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    message_queue.append((user_id, message))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_message_queue():
    while True:
        if message_queue:
            user_id, message = message_queue.popleft()
            context = load_context(user_id)

            user_message = {"role": "user", "content": message.text}
            context.append(user_message)
            save_context(user_id, context)

            # –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            print(f"[INFO] –ë–æ—Ç —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}.")
            await app.read_chat_history(chat_id=message.chat.id)
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
            print(f"[INFO] –ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç –¥–ª—è {user_id}.")
            await app.send_chat_action(chat_id=message.chat.id, action=enums.ChatAction.TYPING)
            typing_time = random.randint(3, 5)

            bot_reply = None
            if is_question(message.text):
                bot_reply = await generate_response(context)
            else:
                # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(2)
                if len(message_queue) > 0 and message_queue[0][0] == user_id:
                    print(f"[INFO] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}, –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ.")
                    continue

                if random.random() < 0.5:
                    bot_reply = await generate_response(context)

            if bot_reply:
                first_part, second_part = split_reply(bot_reply)

                await asyncio.sleep(typing_time)  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã "–ø–µ—á–∞—Ç–∞–µ—Ç"
                await message.reply_text(first_part)

                if second_part:
                    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await app.send_chat_action(chat_id=message.chat.id, action=enums.ChatAction.TYPING)
                    await asyncio.sleep(typing_time)
                    await message.reply_text(second_part)

                assistant_message = {"role": "assistant", "content": bot_reply}
                context.append(assistant_message)
                save_context(user_id, context)
        else:
            await asyncio.sleep(1)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    user_ids = [file.split('.')[0] for file in os.listdir(context_dir) if file.endswith('.json')]

    if not user_ids:
        print("[INFO] –ö–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å–∫–∞–µ–º send_message...")
        try:
            subprocess.run(["python", "send_message.py"], check=True)
        except subprocess.CalledProcessError as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è send_message: {e}")
    else:
        print("[INFO] –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –Ω–∞–π–¥–µ–Ω—ã. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    asyncio.ensure_future(process_message_queue())
    app.run()
